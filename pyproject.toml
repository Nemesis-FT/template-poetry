#######################
# Python build system #
#######################

# The build system to use when installing this package.
# Used when installing the package with `pip install .`.
# See also: https://www.python.org/dev/peps/pep-0517/

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


###################
# Poetry settings #
###################

# See https://python-poetry.org/docs/pyproject/ for more details!

[tool.poetry]

# The name of your project.
# Ensure that it is available on PyPI: https://pypi.org/
name = "PACKAGE_NAME"

# The version of the package.
version = "0.1.0"

# A brief, one-sentence description about your project.
description = ""

# A list of the authors of the project.
authors = [
    "Your Name <you@example.org>",
]

# A list of maintainers of the project.
# Often, it is the same as the authors list.
maintainers = [
    "Your Name <you@example.org>",
]

# The license of the package.
# Uses SPDX format: https://spdx.org/licenses/
license = ""

# The README file.
readme = "README.md"

# The URL of the project website.
# Not the GitHub repository!
homepage = "https://example.org/"

# The URL of the project repository.
repository = "https://github.com/"

# The URL of the project documentation location.
documentation = "https://example.org/docs"

# Up to five keywords related to your project.
# See also: https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/#keywords
keywords = [
    "",
    "",
    "",
    "",
    "",
]

# Any number of trove classifiers that apply to your project.
# See the list at: https://pypi.org/classifiers/
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
]

# ADVANCED: specify the packages exported by your project
# See also: https://python-poetry.org/docs/pyproject/#packages
# packages = [
#     # Regular packages
#     { include = "OTHER_PACKAGE_NAME" },
#     # Namespace packages
#     { include = "EXTEND/OTHER/NAMESPACE/**/*.py" }
# ]

# ADVANCED: include additional files in the build
# include = [
#     "FILENAME.txt"
# ]

# ADVANCED: exclude files from the build
# exclude = [
#     "PACKAGE_NAME/test.py"
# ]


########
# URLs #
########

# Additional project URLs in a name → link mapping.

[tool.poetry.urls]


###########
# Scripts #
###########

# Poetry can create "binaries" to add to the PATH when the project is installed.
# They are specified in the form of a mapping with the command name as key and the function to execute as value.

[tool.poetry.scripts]
# If you are building a library, comment this.
# If you are building an application, replace PACKAGE-NAME and PACKAGE_NAME with your package name in kebab-case and snake_case respectively.
PACKAGE-NAME = "PACKAGE_NAME.__main__:main"


################
# Dependencies #
################

# A mapping of dependencies of the project
# It is automatically maintained by `poetry add` / `poetry remove`.
# You can manually specify allowed version numbers:
# * means "any release"
#         *        →  any
# ^X.X.X means "newer releases with this major version"
#         ^3.10.1  →  == 3      && >= 3.10.1
# ~X.X.X means "newer releases with this minor version"
#         ~3.10.1  →  == 3.10   && >= 3.10.1
# nothing means "this specific release"
#          3.10.1  →  == 3.10.1

[tool.poetry.dependencies]
python = "^3.10"


############################
# Development dependencies #
############################

# Same as above, but these dependencies are installed only if the project is being installed in development mode.
# They are excluded from the final build.

[tool.poetry.dev-dependencies]


##################
# Package extras #
##################

# ADVANCED: specify optional dependency groups.
# See: https://python-poetry.org/docs/pyproject/#extras

[tool.poetry.extras]


##################
# Poetry plugins #
##################

# ADVANCED: extend Poetry's functionality.
# See: https://python-poetry.org/docs/pyproject/#plugins

[tool.poetry.plugins]


